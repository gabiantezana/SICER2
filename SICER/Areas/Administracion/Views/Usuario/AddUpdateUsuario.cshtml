@using SICER.Areas.Administracion.Controllers
@using SICER.LOGIC.Administracion
@using SICER.MODEL
@model SICER.VIEWMODEL.Administracion.Usuario.UsuarioViewModel
@{
    ViewBag.Title = Model.UsuarioId.HasValue ? "Editar Usuario" : "Crear Usuario";
    ViewBag.Icon = Model.UsuarioId.HasValue ? "edit" : "plus";
    var isEdit = Model.UsuarioId.HasValue ? "true" : "false";
}
@using (Html.BeginForm("AddUpdateUsuario", "Usuario", FormMethod.Post))
{
    @section Breadcrumbs{
        <li><a href="@Url.Action("ListUsuarios", "Usuario")">Listado de usuarios</a></li>
    }

    <div class="panel-footer text-right">
        <button class="btn btn-primary" id="btnGuardar"><i class="fa fa-save" aria-hidden="true"></i>&nbsp; Guardar</button>
    </div>
    <div class="panel">
        <div class="panel-heading">
            <h5 class="panel-title">Datos del usuario</h5>
        </div>
        @if (Model.UsuarioId.HasValue)
        {
            @Html.HiddenFor(x => Model.UsuarioId)
        }
        <div class="panel-body">
            <div class="form-group">
                @Html.LabelFor(x => Model.Estado, new { @class = "col-sm-3 control-label" })
                <div class="col-sm-9">
                    @Html.CheckBoxFor(x => Model.Estado, new { @data_plugin = "switchery" })
                </div>
            </div>
            @Html.EditorFor(x => Model.UserName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.EditorFor(x => Model.Nombres, new { htmlAttributes = new { @class = "form-control" } })
            @Html.EditorFor(x => Model.Apellidos, new { htmlAttributes = new { @class = "form-control" } })
            @Html.EditorFor(x => Model.Documento, new { htmlAttributes = new { @class = "form-control" } })
            @Html.EditorFor(x => Model.Correo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.EditorFor(x => Model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
            @*@Html.EditorFor(x => Model.Password, new { htmlAttributes = new { @class = "form-control" } })//TODO RESET*@

            <div class="form-group col-sm-6">
                @Html.LabelFor(x => Model.FechaNacimiento, new { @class = "control-label" })
                <div class="input-group date">
                    @Html.TextBoxFor(x => Model.FechaNacimiento, "{0:dd/MM/yyyy}", new { @class = "form-control fecha", @type = "text" })
                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                </div>
                @Html.ValidationMessageFor(x => Model.FechaNacimiento)
            </div>
            <div class="form-group col-md-6 col-sm-12">
                @Html.LabelFor(x => Model.RolId, new { @class = "form-label " })
                @Html.DropDownListFor(x => Model.RolId, new SelectList(Model.RolJList, "id", "text", 0), new { @class = "form-control form-group-margin select-rol", @data_plugin = "select2", @data_isedit = isEdit })
                @Html.ValidationMessageFor(x => Model.RolId)
            </div>
            <div class="form-group col-md-6 col-sm-12">
                @Html.LabelFor(x => Model.AreaId, new { @class = "form-label " })
                @Html.DropDownListFor(x => Model.AreaId, new SelectList(Model.AreaJList, "id", "text", 0), new { @class = "form-control form-group-margin select-rol", @data_plugin = "select2", @data_isedit = isEdit })
                @Html.ValidationMessageFor(x => Model.AreaId)
            </div>
            <div class="form-group col-md-6 col-sm-12">
                @Html.LabelFor(x => Model.SapBusinessPartnerCardCode, new { @class = "form-label " })
                @Html.DropDownListFor(x => Model.SapBusinessPartnerCardCode, new SelectList(Model.SapBusinessPartnerJList, "id", "text"), new { @class = "form-control form-group-margin ", @data_plugin = "select2", @data_isedit = string.IsNullOrEmpty(Model.SapBusinessPartnerCardCode) } )
                @Html.ValidationMessageFor(x => Model.SapBusinessPartnerCardCode)
            </div>
        </div>
    </div>

    <div class="panel panel-subroles" style="display:  @(Model.RolId== (int)AppRol.GESTORDOCUMENTOS? "block":"none")">
        <div class="panel-heading">
            <h4 class="panel-title"> <i class="fa fa-cubes" aria-hidden="true"></i> Permisos por documentos</h4> <br />
            <div class="panel-actions">
                <a class="panel-action icon wb-minus" data-toggle="panel-collapse" aria-hidden="true"></a>
            </div>
        </div>
        <div class="panel-body">
            @{
                var _listDocumentNames = new List<string>();
                foreach (var rol in Model.RolList)
                {
                    _listDocumentNames.Add(rol.Codigo.Split('.')[1]);
                }
            }
            @foreach (var item in _listDocumentNames.Distinct())
            {
                <div class="col-md-4">
                    <h5 class="title-desc"> <i class="fa fa-file-o" aria-hidden="true"></i> &nbsp @item</h5>
                    <hr />
                    @foreach (var rol in Model.RolList.Where(x => x.Codigo.Split('.')[1] == item))
                    {
                        UsuarioRoles usuarioRol = Model.RolUserList.ToList().FirstOrDefault(x => x.Rol.Codigo == rol.Codigo);
                        <div class="checkbox-custom checkbox-primary">
                            <input type="checkbox" id="chk-@rol.Codigo" name="chk-@rol.Codigo" @(usuarioRol == null || !usuarioRol.Estado ? string.Empty : "checked") />
                            <label for="chk-@rol.Codigo">&nbsp; @rol.Descripcion</label>
                        </div>
                        if (@rol.Codigo.Contains("APROBADOR"))
                        {
                            foreach (var nivelAprobacion in new SICEREntities().NivelAprobacion.Where(x => x.TipoDocumento.Codigo == item))
                            {
                                var nivelAprobacionUsuario = Model.NivelAprobacionIdList.ToList().FirstOrDefault(x => x == nivelAprobacion.NivelAprobacionId);
                                    <div class="checkbox-custom checkbox-primary col-lg-offset-1 ">
                                        <input type="checkbox" id="chkNivelAprobacion-@nivelAprobacion.NivelAprobacionId" name="chkNivelAprobacion-@nivelAprobacion.NivelAprobacionId" @(nivelAprobacionUsuario == 0? string.Empty : "checked") />
                                        <label for="chkNivelAprobacion-@nivelAprobacion.NivelAprobacionId">&nbsp; @nivelAprobacion.Descripcion</label>
                                    </div>
                            }
                        }
                    }
                </div>


            }
        </div>
    </div>


    <div class="panel-footer text-right">
        <a class="btn btn-default animsition-link pull-left" href="@Url.Action("ListUsuarios", "Usuario", new { area = SICER.HELPER.ConstantHelper.Area.ADMINISTRACION })"><i class="fa fa-arrow-left"></i> Atrás</a>
        <button class="btn btn-primary" id="btnGuardar"><i class="fa fa-save" aria-hidden="true"></i>&nbsp; Guardar</button>
    </div>
                }
@section Scripts{
    <script>
        $(".select-rol").change(function() {
            if (this.value == '@((int)AppRol.GESTORDOCUMENTOS)') {
                
                $(".panel-subroles").slideDown();
            }
            else
                $(".panel-subroles").slideUp();
        });


        $(function () {
            var _guid = '@Guid.NewGuid()';
            $('#SapBusinessPartnerCardCode').select2({
                ajax: {
                    url: '@Url.Action("GetJList", "SapBusinessPartner", new { Area = ConstantHelper.Area.SYNC})',
                    dataType: 'json',
                    type: 'POST',
                    delay: 250,
                    data: function (params) {
                        var values = params.term;
                        return {
                            filter: params.term
                        };
                    },
                    processResults: function (data, params) {
                        return {
                            results: data
                        };
                    },
                    cache: true,
                },
                tags: false,
                createTag: function (newTag) {
                    return {
                        id: _guid + newTag.term,
                        text: newTag.term + "(nuevo)",
                        isNew: true,
                    };
                },
                minimumInputLength: 3,
                allowClear: true,
                language: 'es',
                placeholder: 'Buscar'
            });
        });

    </script>
}